<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | work and hypertext]]></title>
  <link href="http://gveltri.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://gveltri.github.io/"/>
  <updated>2015-10-20T12:48:23-04:00</updated>
  <id>http://gveltri.github.io/</id>
  <author>
    <name><![CDATA[Gerardo Veltri]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[You Betta Work: enter the Web Worker]]></title>
    <link href="http://gveltri.github.io/blog/2015/10/18/web-workers/"/>
    <updated>2015-10-18T20:42:15-04:00</updated>
    <id>http://gveltri.github.io/blog/2015/10/18/web-workers</id>
    <content type="html"><![CDATA[<p><img src="images/you-betta-work.gif"></p>

<p>I&rsquo;m one of those people that thinks Javascript is fascinating and beautiful. I love typing prototype to add a method to an object. Actually, scratch that. But seriously, Javascript can be implemented in the most fascinating ways. Through my web-development journey, I have come across this &lsquo;web-worker&rsquo; guy several times. For those that are curious as me, I&rsquo;ve done a bit of research and collected some interesting information about what exactly web-workers do and why you should care.</p>

<h3>Fundamentals</h3>

<p>Firstly, to understand what web-workers are doing, it&rsquo;s important to understand what basic JavaScript running in your browser is doing. First point:</p>

<ul>
<li>Javascript is embedded in your browser.</li>
</ul>


<p>I&rsquo;ll assume the reader has a bit of familiarity with JavaScript. It&rsquo;s implemented in a browser to give functionality to a web page especially when static elements like CSS and HTML might need to be animated or interactive.</p>

<p>When Javascript is loaded on a page, it is actually placed into the HTML in a &lsquo;&lt;script>&rsquo; tag. If I use a script tag and label the source as another file in my assets, it will render the page with the JavaScript inside those brackets. Tangentially related, this embedded code is interpreted by the browser which then compiles the script in byte code. (Let&rsquo;s avoid going down the wormhole of interpreted/compiled&ndash;it&rsquo;s a bit of both, am I right?)
The script that one sees in the source code of their page is handled as the main UI thread. This is the main execution process. It will register an on-click event. It has access to elements on the page and can make minor calculations. This brings us to the second point:</p>

<h3>Limitations of the Main thread</h3>

<p><img class="right" src="images/chrome-unresponsive.png"></p>

<p>This error message.</p>

<p>When your browser is running a script and the computation takes too long, it catches the error with this alert. The browser cannot tell the difference between a script that is in an infinite loop and one that is simply taking too long. A certain time interval is set as the threshold. Why don&rsquo;t we just test the script to see if it is in an infinite loop? Oh wait&ndash;<a href="https://en.wikipedia.org/wiki/Halting_problem">halting problem</a>.</p>

<p>So, we have one main thread in the browser that can only run short calculations. But, say we want to render a 3D environment and simulate physics in that environment? That&rsquo;s some heavy computation! What if I want to find a really big prime number?</p>

<h3>Enter the web-worker</h3>

<p>The web worker is a script that runs independent of the main thread&rsquo;s event queue. It can handle large processes that would normally time out if they were run as a user interface script. With a web worker, I could make the aforementioned calculations independent of what events are going on in the window.</p>

<p>The way it works:</p>

<p><img src="images/web-worker-diagram.png"></p>

<ul>
<li>The main thread creates the web worker object as well as a web worker object to be sent input from main.</li>
</ul>


<pre><code class="js"> var worker = new Worker('worker.js');
</code></pre>

<ul>
<li>The main thread receives output from the web worker using &lsquo;.onmessage&rsquo;.</li>
</ul>


<pre><code class="js">worker.onmessage = function(event) {
  console.log(event.data);
  // puts the output to the console whenever it is sent
}
</code></pre>

<ul>
<li>The main thread sends input to the web worker through &lsquo;.postMessage&rsquo;.</li>
</ul>


<pre><code class="js">function sendInput(input) {
  worker.postMessage(input);
}
</code></pre>

<p>In the main thread, we have to specify which worker we are sending the input and output to; however, the web worker need only say that it is receiving or sending information. This is because the worker is linked to its origin of creation. If I want the dedicated worker to send and receive information, I simply call the function postMessage() or onmessage().</p>

<p>To be specific, we are talking about <em>dedicated</em> web workers. They have a global scope that allows you to implicity call a MessagePort object with postMessage and onmessage. This is not the case for all web workers. A shared web worker has a SharedWorkerGlobalScope, which allows the worker to receive input from multiple sources through an &lsquo;onconnect&rsquo; event. This functionality allows for separate windows in the browser to connect to the same web worker.</p>

<p>While workers allow us to run heavy computation independent of the event queue, there is a trade-off. If you try accessing DOM, window or parent objects from a worker, you will get <em>undefined</em>. Everything else is fair game. So, if you want heavy computation and window events, you have to interweave the workers and the main thread.</p>

<h3>Get to Work!</h3>

<p>I&rsquo;m sure by now the reader gets a sense of what this tool could be used for. Thus far in my development journey, I have been using workers to simulate physics for a rendered 3D environment.</p>

<p>Physijs uses the physijs_worker to compute the physics of the scene which then posts the response back to the main thread. The formulas are actually written in ammo.js, a port from the C++ physics engine, bullet.</p>

<p>In physi.js, the main thread of the simulation, the worker is thus instantiated and immediately sets transferableMessage to be the postMessage function. TransferableMessage allows for sending an object completely across worker boundaries, neutralizing the original. Come back for another blog post on this functionality.</p>

<p>physi.js
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="k">this</span><span class="p">.</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="nx">worker</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Worker</span><span class="p">(</span> <span class="nx">Physijs</span><span class="p">.</span><span class="nx">scripts</span><span class="p">.</span><span class="nx">worker</span> <span class="o">||</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">physijs_worker</span><span class="p">.</span><span class="nx">js</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="p">);</span>
</span><span class='line'>        <span class="k">this</span><span class="p">.</span><span class="o">&lt;</span><span class="err">/em&gt;worker.transferableMessage = this.&lt;em&gt;worker.webkitPostMessage || this.&lt;/em&gt;worker.postMessage;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">ab</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ArrayBuffer</span><span class="p">(</span> <span class="mi">1</span> <span class="p">);</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">_worker</span><span class="p">.</span><span class="nx">transferableMessage</span><span class="p">(</span> <span class="nx">ab</span><span class="p">,</span> <span class="p">[</span><span class="nx">ab</span><span class="p">]</span> <span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="nx">The</span> <span class="nx">last</span> <span class="nx">two</span> <span class="nx">lines</span> <span class="nx">post</span> <span class="nx">the</span> <span class="nx">message</span> <span class="nx">to</span> <span class="nx">physijs_worker</span><span class="p">.</span><span class="nx">js</span><span class="p">.</span> <span class="nx">Let</span><span class="s1">&#39;s take a look at what&#39;</span><span class="nx">s</span> <span class="nx">going</span> <span class="nx">on</span> <span class="nx">there</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">physijs_worker</span><span class="p">.</span><span class="nx">js</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">transferableMessage</span> <span class="o">=</span> <span class="nx">self</span><span class="p">.</span><span class="nx">webkitPostMessage</span> <span class="o">||</span> <span class="nx">self</span><span class="p">.</span><span class="nx">postMessage</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Again, the script sets transferableMessage to be the function by which messages are sent back to the main thread. And later in the script, the worker sends back the same objects, updated with calculations.</p>

<pre><code class="js">var ab = new ArrayBuffer( 1 );
transferableMessage( ab, [ab] );
</code></pre>

<h3>Sources</h3>

<p>For further reading, check out these thorough resources on the subject:</p>

<p><a href="https://html.spec.whatwg.org/multipage/workers.html">https://html.spec.whatwg.org/multipage/workers.html</a>
<a href="http://javascript.info/tutorial/events-and-timing-depth">http://javascript.info/tutorial/events-and-timing-depth</a>
<a href="http://www.slideserve.com/rogan-goodman/using-web-workers-in-javascript">http://www.slideserve.com/rogan-goodman/using-web-workers-in-javascript</a>
<a href="https://msdn.microsoft.com/en-us/hh549259.aspx">https://msdn.microsoft.com/en-us/hh549259.aspx</a></p>

<p>On transferable objects:
<a href="http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#transferable-objects">http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#transferable-objects</a>
<a href="http://developerblog.redhat.com/2014/05/20/communicating-large-objects-with-web-workers-in-javascript/">http://developerblog.redhat.com/2014/05/20/communicating-large-objects-with-web-workers-in-javascript/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modular Code for Modular Works of Art]]></title>
    <link href="http://gveltri.github.io/blog/2015/09/02/sculpture-mechanics/"/>
    <updated>2015-09-02T15:22:49-04:00</updated>
    <id>http://gveltri.github.io/blog/2015/09/02/sculpture-mechanics</id>
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp; A key feature of Martha Friedman&rsquo;s work is its modularity. Although you won&rsquo;t see people rearranging parts of pieces in the gallery, the human-scale sculptures appear composed of individual objects that are strung through poles or resting on boxes. The digital gallery, however, allows the user to enter an interactive fantasy in which the heavy and delicate pieces can be removed and reaffixed to other supports.</p>

<p><img class="right" src="/images/olive-totem.jpg" width="300" height="500"></p>

<p>&nbsp;&nbsp;&nbsp; Allowing the user to separate objects and rearrange them in a sensible way is an integral part of creating an impactful user experience. Otherwise, a perfectly rendered scene would harly differentiate itself from a photograph, which, along with text, is the artist&rsquo;s medium of choice for representing their artwork. Thus, a logical implementation of cohesion would elevate the gallery in its uniqueness and specificity to the artist&rsquo;s work.</p>

<p>&nbsp;&nbsp;&nbsp; The logic of this mechanic should follow the physical architecture of the sculpture. However it&rsquo;s made in real life should be reflected in the digital environment. <em>Olive Totem</em> (2011) has a cement cube base with a pole perpendicular to the ground. Rubber pimento-stuffed olives are placed at the top of the pole and slid down into place. In the world of computers, we call this a <em>stack</em>. A stack is a collection in which the last added element is the first one removed. Adding to a stack is calling pushing; removing, popping. If one wants to remove a digital olive from the digital armature, it has to be popped from an array of olives where the last olive is the highest on the totem.</p>

<p><img class="left" src="/images/stack.svg" width="300" height="500"></p>

<p>&nbsp;&nbsp;&nbsp; Stacks allow us to conceptualize how the problem might begin to be solved; however, none of the libraries used in this project provide an immediately useable solution to solving this problem. And after hacking away at this problem with my collaborator for a week or so, we discovered that our phsyics engine doesn&rsquo;t support porous meshes. That is&ndash; an olive can&rsquo;t simply have a hole in it and be strung onto the sculpture as in real life. The mechanics of olive stacking must be incorporated in the physics of the environment.</p>

<p>&nbsp;&nbsp;&nbsp; Because we&rsquo;ve already identified this arrangement of pieces as a stack, we know that the mechanics of sculpting will revolve around popping and pushing from an array. There are two majorly important pieces of data in this situation: the array of olives and the armature onto which the olives are &ldquo;snapped&rdquo;. Anyone who knows adobe products well should be familiar with snapping. Snapping is the sometimes-annoying function that moves an object to a specific position when it comes within a certain range of that position. Snapping is how the olives transition between being free objects and anchored to an armature. However, not just any object can be snapped on and off. Only the last object in the array is poppable. Upon initialization this object is pushed to the moveable_objects array, and when it is popped, the next olive is added to the moveable_objects array. The following code is the result of marrying this logic with the environment variables (mouse clicks), 3D models and physics engine.</p>

<p>&nbsp;&nbsp;&nbsp; At the top of my gallery.js, I declared the armature, intersect_cylinder, olives array, and slected_thing as global variables so that they can be accessed by the eventhandlers, the functions that handle user input.</p>

<pre><code class="javascript">var armature, intersect_cylinder, olives = [], selected_thing;
</code></pre>

<p>&nbsp;&nbsp;&nbsp; When the mouse clicks an object (selected_thing), this bit of code is run. Here, it should unsnap an object if it the selected_thing is the last object in the olives array.</p>

<pre><code class="javascript">if (selected_thing == olives[olives.length-1]) {
    olives.pop();
    // only makes next olive moveable if it exists
    if (olives.length !== 0)
    moveable_objects.push(olives[olives.length-1]);
}
</code></pre>

<p>When the mouse is unclicked, this bit of code is run:</p>

<pre><code class="javascript">//retrieves coordinates of the mouse click
_vector.set((evt.clientX / window.innerWidth) * 2 - 1,
        -(evt.clientY / window.innerHeight ) * 2 + 1,
        1);

//a raycaster returns whatever intersects with the 3D line
//drawn from the camera through the mouse click on the near frustum
raycaster.setFromCamera(_vector, camera);
var collisionResults = raycaster.intersectObjects( [intersect_cylinder, armature].concat(olives) );

//if the mouse unclicks on any bit of the sculpture,
//the snapping function begins
if ( collisionResults.length !== 0) {
    if (olives.length == 0) {
    var snap_y = -11 + selected_thing.geometry.boundingSphere.radius;       
    }
    else {
    var snap_y = olives[olives.length-1].position.y
        + olives[olives.length-1].geometry.boundingBox.max.x
        + selected_thing.geometry.boundingBox.max.x;
    }

    selected_thing.__dirtyPosition = true;

    //put object in position
    selected_thing.position.x=armature.position.x;
    selected_thing.position.y=snap_y;
    selected_thing.position.z=armature.position.z;


    //make object static
    var _v3 = new THREE.Vector3(0,0,0);
    selected_thing.setAngularFactor(_v3);
    selected_thing.setLinearFactor(_v3);
    selected_thing.setLinearVelocity(_v3);

    //make last object on olive totem moveable
    var last_index = moveable_objects.indexOf(olives[olives.length-1]);
    moveable_objects.splice(last_index,1);
    if (moveable_objects.indexOf(selected_thing) == null) {
    moveable_objects.push(selected_thing);
    // avoids creating duplicates if the object is already in the moveable objects array
    }

    //finally, push selected_thing on the olives stack
    olives.push(selected_thing);


}
</code></pre>

<p>And with a lot of debugging, it works like a charm.</p>

<p>&nbsp;&nbsp;&nbsp; After playing around a bit in the console, adding new sculptures wherever I saw fit, I discovered a rather annoying problem. When I add another sculpture that has the armature/olive stack feature, I have to duplicate the code above. This code is not designed to scale with new sculptures being added, dynamically or not. Slightly restructuring the logic of this feature will improve the performance of the gallery and its potential for further development. It simply requires refactoring the olives and armature into an object that is then added to an array of globally accessible sculptures.</p>

<p>The resulting global variables are then simply:</p>

<pre><code class="javascript">var selected_thing, sculptures = [];
</code></pre>

<p>And the sculpture object looks something like:</p>

<pre><code class="javascript">var Sculpture = function(armature,modules) {
    this.armature = armature;
    this.modules = modules;
    sculptures.push(this);
};
</code></pre>

<p>Which means that everything in the snapping function has to be changed accordingly.</p>

<p>Snapping off:</p>

<pre><code class="javascript">for (i = 0; i &lt; sculptures.length; i++) {
    if (selected_thing == sculptures[i].modules[sculptures[i].modules.length-1]) {
    sculptures[i].modules.pop();
    // only makes next olive moveable if it exists
    if (sculptures[i].modules.length !== 0)
        moveable_objects.push(sculptures[i].modules[sculptures[i].modules.length-1]);
    break;
    }

}
</code></pre>

<p>And the snapping to:</p>

<pre><code class="javascript">
var sculpture;
var collisionResults;

_vector.set((evt.clientX / window.innerWidth) * 2 - 1,
        -(evt.clientY / window.innerHeight ) * 2 + 1,
        1);

raycaster.setFromCamera(_vector, camera);

//iterates through sculpture objects
for (i = 0; i &lt; sculptures.length; i++) {
    collisionResults = raycaster.intersectObjects(sculptures[i].modules.concat(sculptures[i].armature));
    if (collisionResults.length !== 0) {
    sculpture = sculptures[i];
    break;
    }
}


if ( collisionResults.length !== 0) {
    if (sculpture.modules.length == 0) {
    var snap_y = -11 + selected_thing.geometry.boundingSphere.radius;
    }
    else {
    var snap_y = sculpture.modules[sculpture.modules.length-1].position.y
        + sculpture.modules[sculpture.modules.length-1].geometry.boundingBox.max.x
        + selected_thing.geometry.boundingBox.max.x;
    }

    selected_thing.__dirtyPosition = true;

    //put object in position
    selected_thing.position.x=sculpture.armature.position.x;
    selected_thing.position.y=snap_y;
    selected_thing.position.z=sculpture.armature.position.z;


    //make object static
    var _v3 = new THREE.Vector3(0,0,0);
    selected_thing.setAngularFactor(_v3);
    selected_thing.setLinearFactor(_v3);
    selected_thing.setLinearVelocity(_v3);

    //make last object on sculpture stack moveable
    var last_index = moveable_objects.indexOf(sculpture.modules[sculpture.modules.length-1]);
    moveable_objects.splice(last_index,1);
    if (moveable_objects.indexOf(selected_thing) == null) {
    moveable_objects.push(selected_thing);
    // avoids creating duplicates if the object is already in the moveable objects array
    }

    //finally, push selected_thing on the sculpture stack
    sculpture.modules.push(selected_thing);


}
//end snapping

selected_thing = null;
}
</code></pre>

<p>&nbsp;&nbsp;&nbsp; Because I&rsquo;ve now folded the armature and olives into an object, I can further refactor the code to include logic specific to the piece. Moving forward, I plan to include new mechanics beyond stacking and animating the snapping and desnapping so as to enhance the user&rsquo;s experience.</p>

<p>&nbsp;&nbsp;&nbsp; Also, those damn olives need to be properly modeled.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Project Updates]]></title>
    <link href="http://gveltri.github.io/blog/2015/08/05/project-updates/"/>
    <updated>2015-08-05T21:05:54-04:00</updated>
    <id>http://gveltri.github.io/blog/2015/08/05/project-updates</id>
    <content type="html"><![CDATA[<h3>BASH Shell Scripts</h3>

<p>&nbsp;&nbsp;&nbsp; Over the last few weeks, I&rsquo;ve been working on a few projects with varying motivations and goals. Before I started at Flatiron, I began using a text editor called emacs as per the advice of a friend who works on OpenBSD. The editor is daunting at first. The learning curve is enormous. After using it for an hour, I wondered why anyone would bother; however, having used it for three and a half weeks, my efficiency in writing code has gone up significantly.</p>

<p>&nbsp;&nbsp;&nbsp; While the program is extremely difficult to learn, memorizing the key-commands results in your hands never having to leave the home position. No more shifting your hands from the keyboard to the mouse to click an area of text. Further, the editor can be customized to reduce the number of times one klicks the keyboard. Becoming more efficient at using the computer is like a drug. Since starting at Flatiron, I&rsquo;ve been seeking ways to speed up the lab-completion process, so I can spend more time reviewing and refactoring code.</p>

<p>&nbsp;&nbsp;&nbsp; So, naturally, I started writing some basic shell scripts. When bash loads, it loads a file called ~/.bash_profile where one can write new shortcuts like &ldquo;subl&rdquo; to open sublime or &ldquo;ll&rdquo; to shorten &ldquo;ls -lah&rdquo;. When we start and end a lab, there&rsquo;s a series of bash commands we all use in succession. They are best condensed and shortened to one command. So, with a bit of research, I set out to write two short scripts.</p>

<p>&nbsp;&nbsp;&nbsp; The first one clones a repository and then changes to the directory that it created.</p>

<p>~/.bash_bin/gitclonecd.sh
```sh</p>

<p>string=$1
git clone $string</p>

<p>string=${string#<em>/}
string=${string%.</em>}</p>

<p>cd ${string}
echo &ldquo;cloned and moved into directory ${string)&rdquo;</p>

<pre><code>
&amp;nbsp;&amp;nbsp;&amp;nbsp; However, if I wanted to use this script, I would have to type the file name and path in terminal. I needed to also write an alias in my .bash_profile file that would automatically call the script and feed it the command-line argument.

~/.bash_profile
</code></pre>

<p>alias gitf=&ldquo;. ~/.bash_bin/gitaddcommitpush.sh&rdquo;
alias gits=&ldquo;. ~/.bash_bin/gitclonecd.sh&rdquo;</p>

<pre><code>

&amp;nbsp;&amp;nbsp;&amp;nbsp; The second alias refers to the script pasted above. The first alias refers to the first script I made. This one handles adding, committing, pushing and changing to the above directory.

~/.bash_bin/gitaddcommitpush.sh
</code></pre>

<p>string=$@</p>

<p>git add .
git commit -m &ldquo;${string}&rdquo;
git push origin master
hub browse
cd ..
echo &ldquo;Pushed to Github with message ${string}.&rdquo;</p>

<pre><code>
&amp;nbsp;&amp;nbsp;&amp;nbsp; There are some non-ideal elements to these scripts. ~~For one, the $string variable only takes one command-line argument. Arguments in bash are separated by white space. I can effectively only push a commit with one word. Luckily, that suffices for labs.~~ *I fixed this problem using $@ and interpolating the variable on line 3. $@ returns all command line arguments in one variable.* ~~Secondly, the command-line argument in the first shell script--the url for the remote repository--is reduced to a substring in a very inelegant way. Instead of being returned with regex, it is hardcoded with the index of the string. If anyone wants to use this script, they will have to change lines 3 and 4 to reflect their own account's url. As I learn more bash shell script language, I plan to improve this code.~~ *This was improved with the use of some "shell built-ins". The code in gitclonecd.sh extracts everything left of "." and everything right of "/" returning the name of the directory that had already been cloned.*


### An Artist's Website


&amp;nbsp;&amp;nbsp;&amp;nbsp; Several months ago, a friend of mine who makes large, beautiful and oddly sexual sculptures was talking to me about artist websites. She regretted she didn't have one but acknowledged that her vision would cost a significant amount of money to build. Her idea was to have a website where one could pull about the modules of her pieces, which would allow the digital viewer to recombine the pieces in order to create new sculptures. At the time, I had only a bit of experience with building websites, having worked on my own with HTML, CSS and very basic JS. 

&amp;nbsp;&amp;nbsp;&amp;nbsp; A few months later, a friend of mine was working on an interactive web game with the javascript library, THREE.js. THREE allows someone with slightly-more-than-basic understanding of javascript to model and render three-dimensional objects in a web browser. While browsing the examples of THREE, a page using a second library, Physi.js, an interactive Jenga game caught my attention. The blocks were beautifully rendered. One could pull out a block, and the tower would collapse rather realistically.

&amp;nbsp;&amp;nbsp;&amp;nbsp; It took me another few months to make the connection. I could build this sculptor's website using these two libraries, giving her exactly what she was looking for. In the end, I would get a fulfilling web graphics project with my name on an influential artist's website. So, I pitched her the idea with my friend, and she was elated.

&amp;nbsp;&amp;nbsp;&amp;nbsp; Last week, I began writing the code that would sketch out the basic environment of the web gallery. Here's a snippet of code to illustrate how the libraries work.

marthafriedman/public/app/assets/javascripts/gallery.js
</code></pre>

<pre><code>box = new Physijs.BoxMesh(
new THREE.BoxGeometry( 10, 10, 10 ),
new THREE.MeshLambertMaterial({ color: 0xFF66FF }),
    .4,
.4

);
box.position.y=20;
box.castShadow = true;
box.receiveShadow = true;
scene.add( box );
moveable_objects.push( box ); //add box to the array of shit that can be moved
</code></pre>

<p>```</p>

<p>&nbsp;&nbsp;&nbsp; Line one declares a new Physijs object with four different arguments. The first argument gives the object a shape; the second gives the object a mesh that reacts to light and has a color (in this case, pink), the third and fourth correspond to the object&rsquo;s friction and restitution. The last line adds the box to an array of things that can eventually be clicked. That bit of code is dealt with later in the gallery.js file and is currently giving me a headache. But, it&rsquo;s all part of the process.</p>

<p>Here&rsquo;s a progress pics, because&ndash;well&ndash;pics or it didn&rsquo;t happen.</p>

<p><img class="<a" src="href="http://i.imgur.com/dO966CM.png">http://i.imgur.com/dO966CM.png</a>"></p>
]]></content>
  </entry>
  
</feed>
